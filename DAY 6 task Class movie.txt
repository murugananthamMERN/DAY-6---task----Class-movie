1).https://github.com/rvsp/typescript-oops/blob/master/Practice/Movie.md

 class movie {
   constructor (title = " " , studio = " ", rating = " ")
     {
     this.title = title;
     this.studio = studio;
     this.rating = rating;
     }
     getpg(movies = [], rating = " ")
     {
        return movies.filter((m) => m.rating===rating);
     }
 }
 const leo = new movie("leo","lalith productions","PG13");
 const jailor = new movie ("jailor","sun pictures","PG");
 const indian = new movie ("indian2","RKFI","PG13");
 const ayalan = new movie("ayalan","fox star","PG");
 const maveeran = new movie("maveeran","eros inteernational","PG13");
 const thangalan = new movie("thangalan","thanu presents","R");
 const rolex = new movie("rolex","lcu","R");

 
 const moviesarray = [leo,jailor,indian,ayalan,maveeran,thangalan,rolex];

  console.log(leo.getpg(moviesarray,"R"));

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2).https://github.com/rvsp/typescript-oops/blob/master/Practice/class-circle.md


  class Circle {
  constructor(radius, color) {
    this.radius = radius;
    this.color = color;
  }
  getRadius(){
    return this.radius;
    };
  setRadius(value){
    this.radius = value;
    };
  getColor();
  setColor();
  
  getArea(){
    return Math.PI * this.radius * this.radius;
    };
  getCircumference(){
    return 2 * Math.PI * this.radius;
    };
}

let cir = new Circle(1.0, "red");

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

3).Write a “person” class to hold all the details.

class Person {
  constructor(name , lastName , surName , DOB) {
    this.fullName = name;
    this.lastName = lastName;
    this.surName = surName;
    this.DOB = DOB;
  }
  
  getName() {
    return this.fullName;
  
  }
  getlastName(){
    return this.lastName;
    }
  getsurName() {
    return this.surName;
  }
  getDOB(){
     return this.DOB;
    }
}
class Employee extends Person {
  constructor(name,lastName,surName,DOB,id){
    super(name,lastName,surName,DOB);
    this.id = id;
    
  }
  getId(){
    return this.id
  }
}
let obj = new Employee("Arun","Kumar","S","01/05/1988","SE002");
console.log(obj.getName());
console.log(obj.getlastName());
console.log(obj.getsurName());
console.log(obj.getDOB());
console.log(obj.getId());

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

4).write a class to calculate the uber price.


class UberPriceCalculator {
  constructor(baseFare, costPerMinute, costPerKilometer, surgeMultiplier) {
    this.baseFare = baseFare;
    this.costPerMinute = costPerMinute;
    this.costPerKilometer = costPerKilometer;
    this.surgeMultiplier = surgeMultiplier;
  }

  calculatePrice(distance, duration, isSurge) {
    let price = this.baseFare;
    price += this.costPerMinute * duration;
    price += this.costPerKilometer * distance;
    
    if (isSurge) {
      price *= this.surgeMultiplier;
    }
    
    return price;
  }
}
const calculator = new UberPriceCalculator(30, 1, 10, 10);
const distance = 5; // in Kilometer
const duration = 10; // in minutes
const isSurge = true;

const price = calculator.calculatePrice(distance, duration, isSurge);
console.log("Uber price:", price);